{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://api2.circlemind.co/api/v1"
    }
  ],
  "info": {
    "title": "Smooth",
    "version": "0.1.1",
    "description": "# Introduction\n\nThe Smooth API allows for programmatic browser automation and task execution. You can run complex tasks, manage interactive browser sessions, and more.\n\nThis documentation provides a guide to using the API directly, as well as through our Python SDK.\n\n# Authentication\n\nTo use the API, you need an API key. The API key must be sent in the `apikey` header with every request.\n\nExample: `apikey: YOUR_API_KEY`\n\nIf you are using the Python SDK, you can provide the API key in two ways:\n\n1.  **Directly in the client constructor**:\n\n    ```python\n    from smooth import SmoothClient\n    client = SmoothClient(api_key=\"YOUR_API_KEY\")\n    ```\n\n2.  **As an environment variable**:\n    Set the `CIRCLEMIND_API_KEY` environment variable, and the client will automatically use it.\n\n    ```bash\n    export CIRCLEMIND_API_KEY=\"YOUR_API_KEY\"\n    ```\n\n# Python SDK\n\nThe Smooth Python SDK provides a convenient way to interact with the Smooth API.\n\n## Installation\n\nYou can install the Smooth Python SDK using pip:\n\n```bash\npip install smooth-py\n```\n\n## Features\n\n*   **Synchronous and Asynchronous Clients**: Choose between `SmoothClient` for traditional sequential programming and `SmoothAsyncClient` for high-performance asynchronous applications.\n*   **Task Management**: Easily run tasks, check their status, and retrieve results.\n*   **Interactive Browser Sessions**: Get access to and manage interactive browser sessions.\n\n## Usage\n\n### Synchronous Client\n\nThe `SmoothClient` is ideal for scripts and applications that don't require asynchronous operations.\n\n#### Running a Task and Waiting for the Result\n\n```python\nfrom smooth import SmoothClient\nfrom smooth.errors import TimeoutError, ApiError\n\nwith SmoothClient() as client:\n    try:\n        task_handle = client.run(\n            task=\"Go to https://www.google.com and search for 'Smooth SDK'\"\n        )\n        print(f\"Task started with ID: {task_handle.id}\")\n        print(f\"Live view: {task_handle.live_url}\")\n\n        completed_task = task_handle.result() # This blocks until the task is done\n        \n        if completed_task.status == 'done':\n            print(\"Task Output:\", completed_task.output)\n        else:\n            print(\"Task Failed:\", completed_task.output)\n            \n    except TimeoutError:\n        print(\"The task timed out.\")\n    except ApiError as e:\n        print(f\"An API error occurred: {e}\")\n```\n\n### Asynchronous Client\n\nThe `SmoothAsyncClient` is designed for use in asynchronous applications, such as those built with `asyncio`.\n\n#### Running a Task and Waiting for the Result\n\n```python\nimport asyncio\nfrom smooth import SmoothAsyncClient\nfrom smooth.errors import TimeoutError, ApiError\n\nasync def main():\n    async with SmoothAsyncClient() as client:\n        try:\n            task_handle = await client.run(\n                task=\"Go to Github and search for \\\"smooth-sdk\\\"\"\n            )\n            print(f\"Task started with ID: {task_handle.id}\")\n            print(f\"Live view: {task_handle.live_url}\")\n\n            completed_task = await task_handle.result()\n            \n            if completed_task.status == 'done':\n                print(\"Task Output:\", completed_task.output)\n            else:\n                print(\"Task Failed:\", completed_task.output)\n                \n        except TimeoutError:\n            print(\"The task timed out.\")\n        except ApiError as e:\n            print(f\"An API error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```"
  },
  "security": [
    {
      "APIKeyHeader": []
    }
  ],
  "tags": [
    {
      "name": "Agent",
      "description": "Operations related to tasks"
    },
    {
      "name": "Session",
      "description": "Operations related to the browser sessions"
    }
  ],
  "paths": {
    "/task": {
      "post": {
        "summary": "Run Task",
        "description": "Submits a task to be executed by the Smooth agent.",
        "tags": [
          "Agent"
        ],
        "operationId": "run_task_task_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRequest"
              },
              "example": {
                "task": "Go to hacker news and get the top 5 stories.",
                "device": "desktop",
                "max_steps": 32
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task successfully submitted. The initial response may have a status of 'waiting'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "403": {
            "description": "Access to a premium feature was requested, but it is not available on the current plan."
          },
          "422": {
            "description": "Validation Error"
          },
          "429": {
            "description": "API credits exhausted."
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api2.circlemind.co/api/v1/task\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"apikey: YOUR_API_KEY\" \\\n     -d '{\n       \"task\": \"Go to hacker news and get the top 5 stories.\",\n       \"device\": \"desktop\",\n       \"max_steps\": 32,\n       \"enable_recording\": true\n     }'"
          },
          {
            "lang": "python",
            "label": "Python (sync)",
            "source": "from smooth import SmoothClient\n\nclient = SmoothClient(api_key=\"YOUR_API_KEY\")\n\ntask_handle = client.run(\n    task=\"Go to hacker news and get the top 5 stories.\",\n    device=\"desktop\",\n    max_steps=32\n)\n\nprint(f\"Task ID: {task_handle.id}\")\n# Wait for the result\nresult = task_handle.result()\nprint(result)"
          },
          {
            "lang": "python",
            "label": "Python (async)",
            "source": "import asyncio\nfrom smooth import SmoothAsyncClient\n\nasync def run_task():\n    client = SmoothAsyncClient(api_key=\"YOUR_API_KEY\")\n    task_handle = await client.run(\n        task=\"Go to hacker news and get the top 5 stories.\",\n        device=\"desktop\",\n        max_steps=32\n    )\n    print(f\"Task ID: {task_handle.id}\")\n    # Wait for the result\n    result = await task_handle.result()\n    print(result)\n    await client.close()\n\nasyncio.run(run_task())"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "const apiKey = 'YOUR_API_KEY';\nconst url = 'https://api2.circlemind.co/api/v1/task';\n\nconst payload = {\n  task: 'Go to hacker news and get the top 5 stories.',\n  device: 'desktop',\n  max_steps: 32,\n  enable_recording: true\n};\n\nasync function runTask() {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'apikey': apiKey\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('Task submitted:', data);\n    // You can now use data.r.id to poll the get task endpoint\n  } catch (error) {\n    console.error('Error running task:', error);\n  }\n}\n\nrunTask();"
          }
        ]
      }
    },
    "/task/{task_id}": {
      "get": {
        "summary": "Get Task",
        "description": "Returns the status and result of a task by its ID.",
        "tags": [
          "Agent"
        ],
        "operationId": "get_task_task__task_id__get",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response: The task has completed (status is 'done' or 'failed').",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted: The task is still running (status is 'waiting' or 'running').",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X GET \"https://api2.circlemind.co/api/v1/task/YOUR_TASK_ID\" \\\n     -H \"apikey: YOUR_API_KEY\""
          },
          {
            "lang": "python",
            "label": "Python (sync)",
            "source": "# Note: The SDK's task_handle.result() method handles this polling for you.\n# This is how you would do it manually:\nfrom smooth import SmoothClient\n\nclient = SmoothClient(api_key=\"YOUR_API_KEY\")\ntask_status = client._get_task(\"YOUR_TASK_ID\") # Internal method\nprint(task_status)"
          },
          {
            "lang": "python",
            "label": "Python (async)",
            "source": "# Note: The SDK's task_handle.result() method handles this polling for you.\n# This is how you would do it manually:\nimport asyncio\nfrom smooth import SmoothAsyncClient\n\nasync def check_task():\n    client = SmoothAsyncClient(api_key=\"YOUR_API_KEY\")\n    task_status = await client._get_task(\"YOUR_TASK_ID\") # Internal method\n    print(task_status)\n    await client.close()\n\nasyncio.run(check_task())"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "const apiKey = 'YOUR_API_KEY';\nconst taskId = 'YOUR_TASK_ID';\nconst url = `https://api2.circlemind.co/api/v1/task/${taskId}`;\n\nasync function getTaskStatus() {\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'apikey': apiKey\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('Task status:', data);\n\n    // You can poll this endpoint until status is 'done' or 'failed'\n    if (data.r.status === 'running' || data.r.status === 'waiting') {\n      console.log('Task is still in progress...');\n    }\n\n  } catch (error) {\n    console.error('Error fetching task status:', error);\n  }\n}\n\ngetTaskStatus();"
          }
        ]
      }
    },
    "/browser/session": {
      "get": {
        "summary": "List Sessions",
        "description": "List all browser session IDs for the user.",
        "tags": [
          "Session"
        ],
        "operationId": "list_browser_sessions_browser_session_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserSessionsResponse"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X GET \"https://api2.circlemind.co/api/v1/browser/session\" \\\n     -H \"apikey: YOUR_API_KEY\""
          },
          {
            "lang": "python",
            "label": "Python (sync)",
            "source": "from smooth import SmoothClient\n\nclient = SmoothClient(api_key=\"YOUR_API_KEY\")\nsessions = client.list_sessions()\nprint(sessions.session_ids)"
          },
          {
            "lang": "python",
            "label": "Python (async)",
            "source": "import asyncio\nfrom smooth import SmoothAsyncClient\n\nasync def list_sessions():\n    client = SmoothAsyncClient(api_key=\"YOUR_API_KEY\")\n    sessions = await client.list_sessions()\n    print(sessions.session_ids)\n    await client.close()\n\nasyncio.run(list_sessions())"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "const apiKey = 'YOUR_API_KEY';\nconst url = 'https://api2.circlemind.co/api/v1/browser/session';\n\nasync function listSessions() {\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'apikey': apiKey\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('Available sessions:', data.r.session_ids);\n  } catch (error) {\n    console.error('Error listing sessions:', error);\n  }\n}\n\nlistSessions();"
          }
        ]
      },
      "post": {
        "summary": "Open Session",
        "description": "Open an interactive browser instance for 5 minutes. You can either create a new session or resume an existing one by providing its `session_id`.",
        "tags": [
          "Session"
        ],
        "operationId": "open_browser_session_browser_session_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrowserSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrowserSessionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unavailable on Free Plan or insufficient credits."
          },
          "422": {
            "description": "Validation Error"
          },
          "429": {
            "description": "Maximum number of browser sessions reached."
          },
          "503": {
            "description": "Service unavailable. Please try again later."
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X POST \"https://api2.circlemind.co/api/v1/browser/session\" \\\n     -H \"Content-Type: application/json\" \\\n     -H \"apikey: YOUR_API_KEY\" \\\n     -d '{\n       \"session_id\": \"my-persistent-session\"\n     }'"
          },
          {
            "lang": "python",
            "label": "Python (sync)",
            "source": "from smooth import SmoothClient\n\nclient = SmoothClient(api_key=\"YOUR_API_KEY\")\n# If session_id is omitted, a random one is created\nbrowser_session = client.open_session(session_id=\"my-session\")\nprint(browser_session.live_url)"
          },
          {
            "lang": "python",
            "label": "Python (async)",
            "source": "import asyncio\nfrom smooth import SmoothAsyncClient\n\nasync def open_session():\n    client = SmoothAsyncClient(api_key=\"YOUR_API_KEY\")\n    # If session_id is omitted, a random one is created\n    browser_session = await client.open_session(session_id=\"my-session\")\n    print(browser_session.live_url)\n    await client.close()\n\nasyncio.run(open_session())"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "const apiKey = 'YOUR_API_KEY';\nconst url = 'https://api2.circlemind.co/api/v1/browser/session';\n\n// To create a new session with a random ID, omit the payload or send an empty object\nconst payload = {\n  session_id: 'my-persistent-session' // or null to create a new one\n};\n\nasync function openSession() {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'apikey': apiKey\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log('Session opened:', data);\n    console.log('Live URL:', data.r.live_url);\n  } catch (error) {\n    console.error('Error opening session:', error);\n  }\n}\n\nopenSession();"
          }
        ]
      }
    },
    "/browser/session/{session_id}": {
      "delete": {
        "summary": "Delete Session",
        "description": "Delete a specific browser session for a user.",
        "tags": [
          "Session"
        ],
        "operationId": "delete_browser_session_browser_session__session_id__delete",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session successfully deleted"
          },
          "404": {
            "description": "Session not found"
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl -X DELETE \"https://api2.circlemind.co/api/v1/browser/session/my-session\" \\\n     -H \"apikey: YOUR_API_KEY\""
          },
          {
            "lang": "python",
            "label": "Python (sync)",
            "source": "from smooth import SmoothClient\n\nclient = SmoothClient(api_key=\"YOUR_API_KEY\")\nclient.delete_session(\"my-session\")\nprint(\"Session 'my-session' deleted.\")"
          },
          {
            "lang": "python",
            "label": "Python (async)",
            "source": "import asyncio\nfrom smooth import SmoothAsyncClient\n\nasync def delete_session():\n    client = SmoothAsyncClient(api_key=\"YOUR_API_KEY\")\n    await client.delete_session(\"my-session\")\n    print(\"Session 'my-session' deleted.\")\n    await client.close()\n\nasyncio.run(delete_session())"
          },
          {
            "lang": "javascript",
            "label": "JavaScript",
            "source": "const apiKey = 'YOUR_API_KEY';\nconst sessionId = 'my-session'; // The ID of the session to delete\nconst url = `https://api2.circlemind.co/api/v1/browser/session/${sessionId}`;\n\nasync function deleteSession() {\n  try {\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        'apikey': apiKey\n      }\n    });\n\n    if (response.ok) {\n        console.log(`Session '${sessionId}' deleted successfully.`);\n    } else {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n  } catch (error) {\n    console.error('Error deleting session:', error);\n  }\n}\n\ndeleteSession();"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BrowserSessionRequest": {
        "properties": {
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The session ID to open in the browser. If None, a new session will be created with a random name.",
            "title": "Session Id"
          },
          "live_view": {
            "type": "boolean",
            "description": "Whether to open a live browser instance using the specified session.",
            "title": "Live View"
          }
        },
        "type": "object",
        "title": "BrowserSessionRequest",
        "description": "Request model for creating a browser session."
      },
      "BrowserSessionResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id",
            "description": "The ID of the browser session associated with the opened browser instance."
          },
          "live_url": {
            "type": "string",
            "title": "Live Url",
            "description": "The live URL to interact with the browser session."
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "BrowserSessionResponse",
        "description": "Browser session response model."
      },
      "BrowserSessionsResponse": {
        "properties": {
          "session_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Session Ids",
            "description": "The IDs of the browser sessions."
          }
        },
        "type": "object",
        "required": [
          "session_ids"
        ],
        "title": "BrowserSessionsResponse",
        "description": "Response model for listing browser sessions."
      },
      "TaskRequest": {
        "properties": {
          "task": {
            "type": "string",
            "title": "Task",
            "description": "The task to run."
          },
          "response_model": {
            "type": "object",
            "title": "Response Model",
            "description": "If provided, the JSON schema describing the desired output structure.",
            "default": null
          },
          "agent": {
            "type": "string",
            "enum": [
              "smooth"
            ],
            "title": "Agent",
            "description": "The agent to use for the task.",
            "default": "smooth"
          },
          "max_steps": {
            "type": "integer",
            "maximum": 128,
            "minimum": 2,
            "title": "Max Steps",
            "description": "Maximum number of steps the agent can take (min 2, max 128).",
            "default": 32
          },
          "device": {
            "type": "string",
            "enum": [
              "desktop",
              "mobile"
            ],
            "title": "Device",
            "description": "Device type for the task. Default is mobile.",
            "default": "mobile"
          },
          "enable_recording": {
            "type": "boolean",
            "title": "Enable Recording",
            "description": "Enable video recording of the task execution. Default is False",
            "default": false
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Browser session ID to use. Each session maintains its own state, such as login credentials."
          },
          "stealth_mode": {
            "type": "boolean",
            "title": "Stealth Mode",
            "description": "Run the browser in stealth mode.",
            "default": false
          },
          "proxy_server": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proxy Server",
            "description": "Proxy server url to route browser traffic through. Must include the protocol to use (e.g. http:// or https://)"
          },
          "proxy_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proxy Username",
            "description": "Proxy server username."
          },
          "proxy_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proxy Password",
            "description": "Proxy server password."
          }
        },
        "type": "object",
        "required": [
          "task"
        ],
        "title": "TaskRequest",
        "description": "Run task request model."
      },
      "TaskResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the task."
          },
          "status": {
            "type": "string",
            "enum": [
              "waiting",
              "running",
              "done",
              "failed"
            ],
            "title": "Status",
            "description": "The status of the task."
          },
          "output": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Output",
            "description": "The output of the task."
          },
          "credits_used": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Credits Used",
            "description": "The amount of credits used to perform the task."
          },
          "device": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "desktop",
                  "mobile"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Device",
            "description": "The device type used for the task."
          },
          "live_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Live Url",
            "description": "The URL to view and interact with the task execution."
          },
          "recording_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recording Url",
            "description": "The URL to view the task recording."
          }
        },
        "type": "object",
        "required": [
          "id",
          "status"
        ],
        "title": "TaskResponse",
        "description": "Task response model."
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "apikey"
      }
    }
  }
}